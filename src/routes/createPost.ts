import { FastifyInstance } from 'fastify'
import { ZodTypeProvider } from 'fastify-type-provider-zod'
import z from 'zod'
import { getSlugFromString } from '../../utils/getSlugFromString'
import { createdAt2 } from '../../utils/createdAt'
import { slugExists } from '../../utils/slugsExists'
import { openDb } from '../configDB.js'

interface PostData {
  title: string
  article: string
  category: string
  author: string
  published: boolean
  vuecomponent: string
}

interface Post {
  title: string
  slug: string
  author: string
  createdAt: string
  article: string
  category: string
  vuecomponent: string | null // accept null or string for the vuecomponent field:
  published: boolean
}

export async function createPost(app: FastifyInstance) {
  app.withTypeProvider<ZodTypeProvider>()
  .post('/post',    {
      schema: {
        body: z.object({
          title: z.string().min(10).max(100),
          article: z.string().default(''),
          category: z.string().transform((val) => val === '' ? 'uncategorized' : val).default('uncategorized'), // if body no has category, set a category with value or it send a category empty string a default
          author: z.string().max(20),
          vuecomponent: z.string().nullable().optional(), // optional se enviar must be: string or null, default is null
          published: z.boolean().default(true),
        }),
      },
    },
    async (request, reply) => {
      // const body = request.body as PostData

      const { title, article, category, author, vuecomponent, published } = request.body as PostData

      const post: Post = {
        title,
        // slug and createdAt is generated by server
        slug: getSlugFromString(title),
        //createdAt: new Date().toISOString(),
        createdAt: createdAt2(),
        article,
        author,
        category,
        published,
        vuecomponent,
      }

      // opcional, but check slugs exists before try add new post

      if (await slugExists(post.slug)) {
        return reply.status(409).send({ error: 'conflict slug already exists' })
      }

      try {
        // Open the SQLite database
        const db = await openDb()

        // Prepare SQL statement
        const stmt = await db.prepare(`
        INSERT INTO Posts (title, slug, author, published, article, category,    vuecomponent, createdAt)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?)
        `)

        // Execute SQL statement with post data
        await stmt.run(
          post.title,
          post.slug,
          post.author,
          post.published || false, // Default to false if published is not provided
          post.article,
          post.category || null, // Use null if category is not provided
          post.vuecomponent || null, // Use null if vuecomponent is not provided
          post.createdAt
        )

        // Finalize the statement
        await stmt.finalize()
        console.log('Post inserted successfully')

        // Send response
        reply.status(201).send({ message: 'created', postSlug: post.slug })

        // Close the database connection
        await db.close()
      } catch (error: any) {
        // Custom error message for duplicate slug
        if (error.errno === 19 && error.code === 'SQLITE_CONSTRAINT') {
          return reply.status(405).send({ error: 'Slug already exists', statusCode: 405 })
        }

        console.error('Error on create post', error)

        // Send error response
        reply.status(500).send({ message: 'Internal Server Error', error })
      }
    }
  )
}
